- Install Xammp:

-- In Linux:
$ wget https://www.apachefriends.org/xampp-files/5.6.20/xampp-linux-x64-5.6.20-0-installer.run
$ sudo su
$ chmod +x xampp-linux-x64-5.6.20-0-installer.run
$ ./xampp-linux-x64-5.6.20-0-installer.run

--- you need to change the port from 80 to 8012 (or any other port) in the following file:
/opt/lampp/etc/httpd.conf
##############################################################
- Run Xampp in Linux:
$ sudo /opt/lampp/lampp start
-- Or use:
$ sudo /opt/lampp/manager-linux-x64.run

-- Run Xampp in Linux Automatically:
--- Method 1:
$ sudo ln -s /opt/lampp/lampp /etc/init.d/lampp
$ sudo update-rc.d lampp start 80 2 3 4 5 . stop 30 0 1 6 .

--- Method 2:
$ sudo gedit /etc/init.d/lampp

The file named "/etc/init.d/lampp" includes:
#!/bin/bash
### BEGIN INIT INFO
# Provides: lampp
# Required-Start:    $local_fs $syslog $remote_fs dbus
# Required-Stop:     $local_fs $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start lampp
### END INIT INFO
/opt/lampp/lampp start

$ ls –l /etc/init.d/lampp
$ sudo chmod +x /etc/init.d/lampp
$ ls –l /etc/init.d/lampp

$ sudo update-rc.d lampp defaults

-- Stop apache2 in case it is running:
$ sudo service apache2 graceful-stop

-- Stop mysql in case it is running:
$ sudo systemctl disable mysql
and reboot the system
##############################################################
- Uninstall Xampp:
$ sudo -i
$ cd /opt/lampp
$ sudo ./uninstall
##############################################################
##############################################################
- BEESM folder should be added to the local server directory --> in case of using XAMPP:
-- In LINUX:
~\opt\lampp\htdocs\
##############################################################
##############################################################
- Installing process for SmartHome:

You need to get permission to connect to the BAALL Server
##############################################################
##############################################################
- For both Arduino & TurtleBot parts:

-- In LINUX:
$ sudo apt-get install build-essential checkinstall
$ sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
$ cd Downloads/
$ sudo wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz
$ sudo tar xzf Python-2.7.12.tgz
$ cd Python-2.7.12
$ sudo ./configure
$ sudo make altinstall

--- check python version:
$ python --version
--------------------------------------------------
#Download/install the latest version of Python 2 from https://www.python.org/ftp/python/2.7.8/python-2.7.8.msi
#32-bit installs is fine as we have encountered other libraries/modules that only offered 32-bit versions.
##############################################################
- If cherrypy is not installed then:
-- In LINUX:
install cherypy:
$ sudo apt-get update
$ sudo pip install cherrypy

if pip not installed:
$ sudo apt-get install python-pip

-- install ws4py to create websocket for cherrypy
$ sudo apt-get update
$ sudo pip install ws4py
##############################################################
##############################################################
-Installing process for Arduino:

-- In LINUX:
--- Download Arduino IDE for Linux from https://www.arduino.cc/en/Main/Software
$ cd <name>/Downloads/arduino-1.8.5
$ sudo ./install.sh

--- In arduino_web_server.py change:
portname = "/dev/ttyACM0" --> <portname> # it will be searched and detected automatically

$ cd /opt/lampp/htdocs/<BEESM>
$ python arduino_web_server.py

if serial module is not yet installed:
$ sudo pip install pyserial

When you see "Blockly-Arduino" can now be accessed at http://127.0.0.1:8090" -->  it means that the connection stablishied properly
########################IMPORTANT###########################
- make it applicable for changing the objects' status in the BAALL:

-- in order to use urllib3 for set and get request, you need to install it with following comment:
$ sudo pip install urllib3

--- extra files in order ro set and get the status of the objects:
    a .h (can be found in BEESM/arduino-libraries) file needs to be created in order to perform the set and get status of each object. It should add to ~/Arduino/hardware/esp8266com/esp8266/libraries/<folder name>
--- in order to parse the json string
    need to download ArduinoJson from https://github.com/bblanchon/ArduinoJson/ and put it in ~/Arduino/hardware/esp8266com/esp8266/libraries/

-- in order to use Wemos D1 Mini for set and get request, you need to install it with following comment:
$ cd /home/<name>/Arduino/
$ mkdir hardware
$ cd hardware
$ mkdir esp8266com
$ cd esp8266com
$ git clone https://github.com/wemos/Arduino_D1.git esp8266

--- if it does not excist:
$ git clone https://github.com/esp8266/Arduino.git esp8266

--- and then:
$ cd /home/<name>/Arduino/hardware/esp8266com/esp8266/tools
$ python get.py
--------------------------------------------------
--- then:
$ mkdir -p ~/Arduino/hardware/espressif
$ cd ~/Arduino/hardware/espressif
$ git clone https://github.com/espressif/arduino-esp32.git esp32
$ cd esp32 
$ git submodule update --init --recursive
--- and then:
$ cd /home/<name>/Arduino/hardware/espressif/esp32/tools
$ python get.py
--------------------------------------------------
--- and then you need to add it to the Arduino IDE:
#Arduino IDE --> File --> Preferences --> Additional boards manager URL --> add "http://arduino.esp8266.com/stable/package_esp8266com_index.json"
--- and then:
#Arduino IDE --> Tools --> Board --> Boards Manager --> install esp8266
--- then:
#Arduino IDE --> Tools --> Board --> WEMOS D1 & mini
defult port ttyUSB0
--------------------------------------------------
--- in order to see the "Serial Monitor" output in BEESM:
    Please change the serial to 115200Baud
##############################################################
##############################################################
- Installing process for TurtleBot:

-- Install ROS Completly for TurtleBot

-- Connect to the TurtleBot via SSh connection and:
$ roscore     on TurtleBot
$ roslaunch turtlebot3_gazebo turtlebot3_world.launch     on PC -----> Simulation only
$ cd /opt/lampp/htdocs/BEESM/       on PC
$ python ros_web_server.py         on PC
$ roslaunch turtlebot3_bringup turtlebot3_robot.launch        on TurtleBot
$ roslaunch turtlebot3_bringup turtlebot3_model.launch        on PC
$ roslaunch turtlebot3_navigation turtlebot3_navigation.launch map_file:=/opt/lampp/htdocs/blockly-share/media/BAALL/baall_08Sep2016.yaml     on PC
$ rosrun rviz rviz -d `rospack find turtlebot3_navigation`/rviz/turtlebot3_nav.rviz       on PC

Setup ROS connection
Find IP's using
$ hostname -I
For local IP
$ sudo arp-scan --interface=wlp0s20f3 192.168.8.159/24
For Turtlebot3 IP (after turning on)

Edit bashrc file both local and turtlebot
$ nano ~/.bashrc
$ source ~/.bashrc

Local
$ export ROS_MASTER_URI=http://192.168.8.159:11311
$ export ROS_HOSTNAME=192.168.8.159

On Turtlebot
$ export ROS_MASTER_URI=http://192.168.8.159:11311
$ export ROS_HOSTNAME=192.168.8.72



Bare minimum to run BEESM programs on turtlebot3
$ roscore on Remote PC

SSH into turtlebot with
$ ssh ubuntu@192.168.8.72
$ password: turtlebot
$ roslaunch turtlebot3_bringup turtlebot3_robot.launch on Turtlebot

$ cd /opt/lampp/htdocs/BEESM/       on PC
$ python ros_web_server.py         on PC




all attributes are available in: http://localhost:8099/
#############################################################
#############################################################
#############################################################
-What we have in BEESM Frontend:
	1-workspace panel - blockly view
	
	2-php code panel for SmartHome and TurtleBot & Arduino code panel for Arduino
		
	3-php code modifier panel - code highlighter applied for both php/Arduino code and php/Arduino code-modifier panels
	
	4-output panel --> working perfectly fine for SmartHome and TurtleBot --> for error handling purposes
		In Arduino part, it shows errors and work as a Serial Monitor

	5-2D Graphical-view panel (it has the data from the SmartHome server) --> refresh the DIV SmartHome based on changes (web socket connection)
		
	6-position and sensor data of the TurtleBot --> location of the TurtleBot in the SmartHome 2D map
	    Safe movement enable users to move safe (avoid hitting obstacles) without SLAM map
	
	7-generate and load XML panel - we have load/save buttons to load/save workspace in local storage
	
	8-code is running from the code panel, but not from the blockly workspace panel

	9-it is designed in 2 different resolution - one for computers with bigger screen size, and one for computers with smaller screen size (max-height:1080px, and min-height:1200px)

	10-web application is integrated into BEESM in order to enable users to run the BEESM generated code from a web
#############################################################
#############################################################
#############################################################
-What do you need to change:
	-In SmartHome:
		1. add the block code into "custom-blocks-<SmartHome>.js" --> this will make the blocks' shape
		2. add the block code into "<SmartHome>_compressed.js" --> this code will be shown to the user as the generated code by corresponding block
		3. add the code which is going to be executed using the block to "eval-<SmartHome>.php"   --> this code will be executed
		4. in "myJavaScript-<SmartHome>-<lan>.js" files, web socket connection should be customized for the suitable SmartHome
		5. "table-<SmartHome>.php" and "table-design-<SmartHome>.php" should be customized based on your SmartHome outlook
		6. "<SmartHome>.php" and "design-<SmartHome>.php" should be customized based on your SmartHome server and objects name
	
	-manage the SmartHome
		1. web socket client for Arduino changes in "myJavaScript-<SmartHome>.js" for UI purposes needs to be changed
		2. go to the "eval-<SmartHome>.php" and change the connection to the corresponding server
		3. depending on how your items named in the server, you need to change the "connect_server" and "change/get_status" Functions
		4. go to the "eval-<SmartHome>.php" and change the functions for changing the status of different items in the SmartHome
##############################################################
	-In Arduino:
	    1. change the functions in "arduino_web_server.py" to be compatible with your Arduino needs (refer to the section "Installing process for Arduino")
		2. add the block code into "custom-blocks-ardu.js" --> this make will make the blocks' shape
		3. add the block code into "arduino_compressed.js" --> this code will be shown to the user
		4. in "arduino_web_server.py" change --> arduino_cmd = '<home>/arduino-1.8.5/arduino' to the desire directory of arduino IDE
		5. in "myJavaScript-ardu.js" web socket connection should be customized for the suitable SmartHome/Arduino
	
	-manage the SmartHome using Arduino
	    1. web socket server in "arduino_web_server.py" should be changed based on our needs
        2. web socket client for Arduino changes in "myJavaScript-ardu.js" for UI purposes needs to be changed
		3. change the Arduino code program (.h) to connect to the LAN and to the SmartHome server. This file should be added to ~/Arduino/hardware/esp8266com/esp8266/libraries/<folder name>
		   it is called (<SmartHome>.h) in this case
		4. this file will be included to the Arduino code using the set and get blocks
		5. in order to parse the json string --> need to download ArduinoJson from https://github.com/bblanchon/ArduinoJson/and put it in ~/Arduino/hardware/esp8266com/esp8266/libraries/
		6. in order to use "Adafruit" and it dependencies like "Neopixel", you need to install and add their libraries to your Arduino library folder
#############################################################
	-In TurtleBot:
		1. change the functions in "ros_web_server.py" to be compatible with your TurtleBot needs (refer to the section "Installing process for TurtleBot")
		2. add the block code into "custom-blocks-ros.js" --> this make will make the blocks' shape
        3. add the block code into "ros_compressed.js" --> this code will be shown to the user
		4. add the code which is going to be executed using the block to "eval-ros.php" --> this code will be executed
		5. in "myJavaScript-ros.js" web socket connection should be customized for the suitable SmartHome/TurtleBot
		
	-manage the SmartHome using TurtleBot
		1. web socket server in "ros_web_server.py" should be changed based on our needs
		2. web socket client for position and sensor data in "myJavaScript-ros.js" for UI purposes needs to be changed
		3. synchronize the SLAM map to SmartHome 2D map and show the location of the TurtleBot in map --> you can manage the SmartHome using the TurtleBot
        4. go to the "eval-ros.php" and change the connection to the corresponding server for the TurtleBot
        5. depending on how your items named in the SmartHome, you need to change the "connect_server" and "change/get_status" Functions
        6. go to the "eval-ros.php" and change the functions for changing the status of different items in the SmartHome
